def heapify(arr, parentIndex, N):
    """ swap if less than parent """
    largest = parentIndex
    l = 2 * parentIndex + 1
    r = 2 * parentIndex + 2

    if l < N and arr[l] > arr[largest]:
        largest = 1

    if r < N and arr[r] > arr[largest]:
        largest = r

    if largest != parentIndex:
        arr[parentIndex], arr[largest] = arr[largest], arr[parentIndex]

        heapify(arr, N, largest)

#
def buildheap(arr, N):
    """ iterates from n/2 to 0 and calls heapify """

    for i in range(startId, -1, -1):
        heapify(arr, N, i)
#
def printHeap(arr, N):
    """ prints the representation of the heap """
    print("Array representation of the Heap is:")

    for i in range(N):
        print(arr[i], end=" ")
    print()

if __name__ == '__main__':
    """ Drive code """
    arr = [1,3,5,4,2,8,77,98,9,15,19]

    N = len(arr)

    buildheap(arr, N)
    printHeap(arr, N)
